import React, { useState, useEffect } from 'react';
import { doc, setDoc } from 'firebase/firestore';
import { db } from './firebase';
import liff from '@line/liff';
import { useNavigate } from 'react-router-dom';

const Register = () => {
  const [formData, setFormData] = useState({
    fullname: '',
    phone: '',
    room: '',
    building: '',
    role: '',
    keycode: '',
  });

  const [userId, setUserId] = useState(null);
  const [displayName, setDisplayName] = useState('');
  const navigate = useNavigate();

useEffect(() => {
  const initLiff = async () => {
    try {
      await liff.init({ liffId: '2007355122-xBNrkXmM', withLoginOnExternalBrowser: true });

      if (!liff.isLoggedIn()) {
        liff.login();
        return;
      }

      const profile = await liff.getProfile();
      const context = liff.getContext();

      console.log('LIFF Profile:', profile);
      console.log('LIFF Context:', context);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ accessToken ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°
      if (!liff.getAccessToken()) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ú‡πà‡∏≤‡∏ô LINE ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ö OA ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
      }

      setUserId(profile.userId);
      setDisplayName(profile.displayName);
    } catch (err) {
      console.error('LIFF init error:', err);
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE ‡πÑ‡∏î‡πâ\n' + err.message);
    }
  };

  initLiff();
}, []);
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!userId) {
      alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ LINE");
      return;
    }

    if (formData.role === 'technician' && formData.keycode !== '12345') {
      alert("üö´ ‡∏£‡∏´‡∏±‡∏™‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return;
    }

    try {
      const userData = {
        name: formData.fullname,
        phone: formData.phone,
        room: formData.room,
        building: formData.building,
        role: formData.role,
        keycode: formData.role === 'technician' ? formData.keycode : '',
        displayName,
      };

      console.log("üì§ Sending user data:", userData);

await setDoc(doc(db, 'users', userId), userData);

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å backend API
await fetch('/api/link-richmenu', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ userId, role: formData.role }),
});

      alert('‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° role
      let welcomeMessage = '';
      switch (formData.role) {
        case 'resident':
          welcomeMessage = '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏ö‡πâ‡∏≤‡∏ô üë§';
          break;
        case 'juristic':
          welcomeMessage = '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• üßë‚Äçüíº';
          break;
        case 'technician':
          welcomeMessage = '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏≤‡∏á üîß';
          break;
        default:
          welcomeMessage = '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢';
      }

      await liff.sendMessages([{ type: 'text', text: welcomeMessage }]);
      liff.closeWindow(); // ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á LINE LIFF

    } catch (err) {
      console.error("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: " + err.message);
    }
  };

  return (
    <div className="container">
      <h2>‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          name="fullname"
          placeholder="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
          value={formData.fullname}
          onChange={handleChange}
          required
        />
        <input
          type="tel"
          name="phone"
          placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
          value={formData.phone}
          onChange={handleChange}
          required
        />
        <input
          type="text"
          name="room"
          placeholder="‡∏´‡πâ‡∏≠‡∏á"
          value={formData.room}
          onChange={handleChange}
          required
        />
        <input
          type="text"
          name="building"
          placeholder="‡∏ï‡∏∂‡∏Å"
          value={formData.building}
          onChange={handleChange}
          required
        />

        <select name="role" value={formData.role} onChange={handleChange} required>
          <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó</option>
          <option value="resident">‡∏•‡∏π‡∏Å‡∏ö‡πâ‡∏≤‡∏ô</option>
          <option value="juristic">‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</option>
          <option value="technician">‡∏ä‡πà‡∏≤‡∏á</option>
        </select>

        {formData.role === 'technician' && (
          <input
            type="password"
            name="keycode"
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ä‡πà‡∏≤‡∏á"
            value={formData.keycode}
            onChange={handleChange}
            required
          />
        )}

        <button type="submit">‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</button>
      </form>
    </div>
  );
};

export default Register;
